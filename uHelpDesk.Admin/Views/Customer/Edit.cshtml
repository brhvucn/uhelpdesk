@model uHelpDesk.Admin.ViewModels.Customer.EditCustomerVM

@{
    ViewData["Title"] = "Edit Customer";
    Layout = "_Layout";
}

@Html.AntiForgeryToken()

<section class="section">
    <div class="container">
        <div class="box">
            <h1 class="title">Edit Customer</h1>

            <form asp-action="Edit" method="post">
                <input type="hidden" asp-for="Id" />

                <div class="field">
                    <label class="label">Name</label>
                    <div class="control">
                        <input asp-for="Name" class="input" />
                    </div>
                    <span asp-validation-for="Name" class="help is-danger"></span>
                </div>

                <div class="field">
                    <label class="label">Email</label>
                    <div class="control">
                        <input asp-for="Email" class="input" />
                    </div>
                    <span asp-validation-for="Email" class="help is-danger"></span>
                </div>

                <div class="field is-grouped">
                    <div class="control">
                        <button type="submit" class="button is-success">Save</button>
                    </div>
                    <div class="control">
                        <a asp-action="Index" class="button is-light">Cancel</a>
                    </div>
                </div>
            </form>

            <h2 class="title is-5 mt-6">Assign New Custom Field</h2>

            <form method="post" asp-action="AssignCustomField" asp-route-id="@Model.Id" id="assignCustomFieldForm">
                <div class="field">
                    <label class="label">Custom Field</label>
                    <div class="control">
                        <select asp-for="SelectedCustomFieldId" class="input" id="customFieldSelect">
                            @foreach (var field in Model.AvailableFields)
                            {
                                <option value="@field.Id" data-type="@field.FieldType.ToLower()">
                                    @field.FieldName (@field.FieldType)
                                </option>
                            }
                        </select>
                    </div>
                </div>

                <div class="field">
                    <label class="label">Value</label>
                    <div class="control">
                        <input asp-for="CustomFieldValue" class="input" id="customFieldValueInput" type="text" />
                    </div>
                    <span asp-validation-for="CustomFieldValue" class="help is-danger"></span>
                </div>

                <div class="field mt-3">
                    <button class="button is-primary" type="submit">Assign Field</button>
                </div>
            </form>
        </div>
    </div>
</section>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        (() => {
            const select = document.getElementById('customFieldSelect');
            const input = document.getElementById('customFieldValueInput');

            function updateInputType() {
                const selectedOption = select.options[select.selectedIndex];
                const fieldType = selectedOption.getAttribute('data-type') || 'text';

                if (fieldType === 'number') {
                    input.type = 'number';
                    input.step = 'any'; // allow decimals
                } else if (fieldType === 'date') {
                    input.type = 'date';
                    input.step = null;
                } else {
                    input.type = 'text';
                    input.step = null;
                }

                // Clear the current input value on type change (optional)
                input.value = '';
            }

            // Initialize input type on page load
            updateInputType();

            // Update input type when custom field selection changes
            select.addEventListener('change', updateInputType);
        })();
    </script>
}
